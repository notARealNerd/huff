import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.*;



public class HuffModel implements IHuffModel{
	HuffViewer view;
	CharCounter charCounter;
	TreeMaker treeMaker;
	//ArrayList<String> encodings1;
	private PriorityQueue encodings; //huffTree
	public final int EOF = 256;
	public SimpleTreeNode nodeTable[]; //encodeTable


	
	public HuffModel(HuffViewer viewer)
	{
		nodeTable = new SimpleTreeNode[EOF+1];
		System.out.println(nodeTable[103]);
		System.out.println(nodeTable);
		view = viewer;
		view.setModel(this);
		charCounter = new CharCounter();
		treeMaker = new TreeMaker(charCounter);
	}
	
	
	/**
     * Display all encodings (via the associated view).
     */
	public void showCodings(){
		HuffEncoder encoder = new HuffEncoder();
        encoder.makeTable(treeMaker); 

        ArrayList<String> encodings1 = new ArrayList(256);
        //System.out.println(encodings1.size());
        for(int k = 0; k<256; k++){
        	encodings1.add(k, "");
        }
       // System.out.println(encodings1.size());

        
        for (int k = 0; k < IHuffConstants.ALPH_SIZE; k++)
        {
            if (nodeTable[k] != null)
            {
            	/*
            	System.out.println(IHuffConstants.ALPH_SIZE);
            	System.out.println(encodings1.size());
            	System.out.println(k);
            	*/
            	System.out.println("encoder.getCode(k): " + encoder.getCode(k));
            
                
                //encodings1.add(k, k + " " + nodeTable[k].getBits() + " at " + nodeTable[k].getCount() + " bits.");
                encodings1.add(k, encoder.getCode(k));
            }
        }
        view.update(encodings1);
	}
	
	 /**
     * Display all chunk/character counts (via the associated view).
     */
	public void showCounts(){
		List buddies = new ArrayList(255);
		for(int k = 0; k<IHuffConstants.ALPH_SIZE; k++){
			buddies.add(k + " " + charCounter.getCount(k)); 
		}
		view.update(buddies);
		
	}
	
	 /**
     * Initialize state via an input stream. The stream most
     * likely comes from a view, it's NOT a BitInputStream
     * @param stream is an input stream for initializing state of this model
     */
	public void initialize(InputStream stream){
		try{
		charCounter.countAll(stream);
		charCounter.set(EOF , 1);
		}catch(IOException e){
			System.out.println("IOException e");
		}
		buildHuffTree();
	}
	
	public void write(InputStream stream, File file, boolean force){
		try{
		BitOutputStream bits = new BitOutputStream(file.getName());
    	bits.write(BITS_PER_INT,MAGIC_NUMBER);
    	int start;
    	for(start = 0; start < EOF+1; start++)
    	{
    		if(charCounter.getCount(start) != 0)
    		{
    			bits.write(BITS_PER_INT, start);
    			bits.write(BITS_PER_INT, charCounter.getCount(start));
    		}
    	}
    	while((start = stream.read()) != -1)
    	{
    			bits.write(nodeTable[start].getCount(), nodeTable[start].getBits());
    	}
    	bits.write(nodeTable[EOF].getCount(),nodeTable[EOF].getBits());
    	bits.close();
		}catch(IOException e){
			e.printStackTrace();
		}	
	}
	
	private static BitSet getBitSet(String message) {
        final BitSet bitSet = new BitSet();
        int i = 0;
        for (i = 0; i < message.length(); i++) {
            if (message.charAt(i) == '0') {
                bitSet.set(i, false);
            } else {
                bitSet.set(i, true);
            }
        }
        bitSet.set(i, true);  
        return bitSet;
    }
	
	private StringBuffer stringTree(TreeNode root, StringBuffer progress){
		//if root is null return
		if(root == null)
			return progress;
		//if it is a leaf, we need to store the binary value
		if(root.myRight == null && root.myLeft == null){
			progress.append("1" + root.myValue);
			return progress;
		}
		else if(root.myLeft != null)
			stringTree(root.myLeft, progress.append("0"));
		else if(root.myRight !=null)
			stringTree(root.myRight, progress.append("0"));
		return progress;
	}
	
	public void setViewer(HuffViewer viewer){
		view = viewer;
	}
	
	/**
     * Uncompress a previously compressed file.
     * @param in is the compressed file to be uncompressed
     * @param out is where the uncompressed bits will be written
     */
    public void uncompress(InputStream in, OutputStream out){ 
    	try{
    	BitInputStream bits = new BitInputStream(in);
    	int magic = bits.read(BITS_PER_INT);
    	if( magic != MAGIC_NUMBER)
    	{
    		System.out.println("Bad Magic Number");
    		return;
    	}
    	for(int start = 0; start < EOF + 1; start++)
    		charCounter.set(start,0);
    	while(true)
    	{
    		int value = bits.read(BITS_PER_INT);
    		int count = bits.read(BITS_PER_INT);
    		charCounter.set(value,count);
    		if(value == EOF)
    			break;
    	}
    	buildHuffTree();
    	
    	while(true)
    	{
    		TreeNode node = (TreeNode)encodings.peek();
    		while(true)
    		{
    			int bit = bits.read(1);
    			if(bit!=0)
    				node = node.getRight();
    			else
    				node = node.getLeft();
    			if(!node.isLeaf())
    				continue;
    			if(node.getValue() == EOF)
    			{
    				out.close();
    				return;
    			}
    			out.write(node.getValue());
    			break;
    		}
    		
    	}
    	}catch(Exception e){
    		e.printStackTrace();
    	}
    		
    }
    
    public void RecurseAndCompute(TreeNode tree, int bits, int count)
    {
    	if(tree.isLeaf())
    	{
    		nodeTable[tree.getValue()] = new SimpleTreeNode();
    		nodeTable[tree.getValue()].SetBits(bits);
    		nodeTable[tree.getValue()].SetCount(count);
    		return;		
    	}
    	RecurseAndCompute(tree.getLeft(),bits << 1,count+1);
    	RecurseAndCompute(tree.getRight(),(bits << 1) +1,count+1);
    }
    
    public void buildHuffTree()
    {
    	encodings= new PriorityQueue();
    	for(int start = 0; start < EOF+1;start++)
		{
			if(charCounter.getCount(start) != 0 )
				encodings.add(new TreeNode(start,charCounter.getCount(start)));
		}
		while(encodings.size() > 1)
		{
			TreeNode smallest = (TreeNode)encodings.remove();
			TreeNode nextsmallest = (TreeNode)encodings.remove();
			encodings.add(new TreeNode(smallest,nextsmallest));
		}
		RecurseAndCompute((TreeNode)encodings.peek(),0,0);
    }
		
		
		
	}

